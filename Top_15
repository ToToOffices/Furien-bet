#include <amxmodx>
#include <csx>
#include <nvault>

new g_Kills[33], g_Deaths[33], g_Headshots[33], g_Skill[33], g_Exp[33]
new g_vault

new const rankNames[][] = {
    "Recruit", "Soldier", "Caporal", "Sergeant", "Locotenent", "General"
}

public plugin_init() {
    register_plugin("Top15 Extended (Persistent)", "1.2", "GPT")

    register_clcmd("say /top15", "show_top15")
    register_clcmd("say /rank", "show_rank")

    register_event("DeathMsg", "event_death", "a")

    g_vault = nvault_open("top15_data")
    if (g_vault == INVALID_HANDLE) {
        set_fail_state("Eroare la deschiderea nVault.")
    }
}

public plugin_end() {
    if (g_vault != INVALID_HANDLE)
        nvault_close(g_vault)
}

public client_disconnect(id) {
    save_player_data(id)
}

public client_authorized(id) {
    load_player_data(id)
}

public event_death() {
    new killer = read_data(1)
    new victim = read_data(2)
    new hs = read_data(3)

    if (killer && killer != victim) {
        g_Kills[killer]++
        if (hs)
            g_Headshots[killer]++
        g_Exp[killer] += 5
        g_Skill[killer] += 1
    }

    if (victim) {
        g_Deaths[victim]++
        g_Exp[victim] += 1
    }

    // INFO: HP rămas la killer
    if (victim != killer && is_user_connected(killer)) {
        new hp = get_user_health(killer)
        new kName[32]
        get_user_name(killer, kName, charsmax(kName))
        client_print(victim, print_chat, "[INFO] Ai fost omorat de %s. a mao ramas cu %d HP.", kName, hp)
    }
}

public show_top15(id) {
    new players[32], num, i
    get_players(players, num)

    new name[32], szBuffer[2048], len
    len += formatex(szBuffer[len], charsmax(szBuffer) - len, "<body bgcolor=#000000><font color=#FFFFFF><pre>")
    len += formatex(szBuffer[len], charsmax(szBuffer) - len, "^nTop 15 Jucători:^n")

    new top[33], scores[33]

    for (i = 1; i <= 32; i++) {
        scores[i] = g_Kills[i] - g_Deaths[i]
        top[i] = i
    }

    // Sortare simplă
    for (new a = 1; a < 32; a++) {
        for (new b = a + 1; b <= 32; b++) {
            if (scores[top[b]] > scores[top[a]]) {
                new temp = top[a]
                top[a] = top[b]
                top[b] = temp
            }
        }
    }

    new shown = 0
    for (i = 1; i <= 32 && shown < 15; i++) {
        new pid = top[i]
        if (!is_user_connected(pid))
            continue

        get_user_name(pid, name, charsmax(name))
        new rankName[32]
        format(rankName, charsmax(rankName), "%s (%d)", get_rank_name(g_Exp[pid]), g_Exp[pid])

        len += formatex(szBuffer[len], charsmax(szBuffer) - len,
            "^n#%d  %s | K: %d  D: %d  HS: %d  Skill: %d  Rank: %s",
            shown + 1, name, g_Kills[pid], g_Deaths[pid], g_Headshots[pid], g_Skill[pid], rankName)
        shown++
    }

    show_motd(id, szBuffer, "Top 15 Jucători")
}

public show_rank(id) {
    new total = 0
    new players[32], name[32]
    get_players(players, total)

    new rank = 1
    new myScore = g_Kills[id] - g_Deaths[id]

    for (new i = 0; i < total; i++) {
        new pid = players[i]
        if (pid == id)
            continue
        if ((g_Kills[pid] - g_Deaths[pid]) > myScore)
            rank++
    }

    get_user_name(id, name, charsmax(name))
    client_print(id, print_chat, "[RANK] %s, ești pe locul #%d din %d jucători.", name, rank, total)
    client_print(id, print_chat, "[RANK] Kills: %d | Deaths: %d | HS: %d | Skill: %d | Exp: %d | Rank: %s",
        g_Kills[id], g_Deaths[id], g_Headshots[id], g_Skill[id], g_Exp[id], get_rank_name(g_Exp[id]))
}

get_rank_name(exp) {
    if (exp < 1000) return rankNames[0]
    else if (exp < 3000) return rankNames[1]
    else if (exp < 6000) return rankNames[2]
    else if (exp < 10000) return rankNames[3]
    else if (exp < 15000) return rankNames[4]
    return rankNames[5]
}

save_player_data(id) {
    new authid[32]
    get_user_authid(id, authid, charsmax(authid))

    new key[64], data[128]
    format(key, charsmax(key), "player_%s", authid)
    format(data, charsmax(data), "%d %d %d %d %d", g_Kills[id], g_Deaths[id], g_Headshots[id], g_Skill[id], g_Exp[id])

    nvault_set(g_vault, key, data)
}

load_player_data(id) {
    new authid[32]
    get_user_authid(id, authid, charsmax(authid))

    new key[64], data[128]
    format(key, charsmax(key), "player_%s", authid)

    if (nvault_get(g_vault, key, data, charsmax(data)) > 0) {
        parse(data, g_Kills[id], g_Deaths[id], g_Headshots[id], g_Skill[id], g_Exp[id])
    }
}
